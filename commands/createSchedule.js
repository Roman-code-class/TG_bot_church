const { Markup } = require("telegraf");
const { loadSchedule1 } = require("../utils/loadSchedule1");
const fs = require("fs");
const dotenv = require("dotenv");
dotenv.config();

const eventNames = {
  Sobitie1: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
  Sobitie2: "–ß–µ—Ç–≤–µ—Ä–≥",
  Sobitie3: "–ú–æ–ª–æ–¥–µ–∂–∫–∞",
  Sobitie4: "–ù–æ—á–Ω–∞—è",
  Sobitie5: "–î—Ä—É–≥–æ–µ",
};

const userSessions = {}; // –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

// üìå –ö–æ–º–∞–Ω–¥–∞ /createSchedule
module.exports.initCreateScheduleCommand = (bot) => {
  bot.command("createSchedule", async (ctx) => {
    console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /createSchedule –≤—ã–∑–≤–∞–Ω–∞");

    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π:",
      Markup.inlineKeyboard([
        [Markup.button.callback("üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è", "create_all")],
        [Markup.button.callback("üé≠ –ü–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è", "create_by_type")],
        [Markup.button.callback("üîô –û—Ç–º–µ–Ω–∞", "create_cancel")],
      ])
    );
  });

  // üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  bot.on("text", async (ctx) => {
    const userId = ctx.from.id;
    const session = userSessions[userId];

    if (!session) return;

    if (session.mode === "text") {
      session.textData = ctx.message.text;
      return confirmSchedule(ctx);
    } else if (session.mode === "step") {
      session.scheduleData[`–®–∞–≥ ${session.step}`] = ctx.message.text;
      session.step++;

      if (session.step > 2) {
        return confirmSchedule(ctx);
      } else {
        return ctx.reply(`üìù –í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç ${session.step}:`);
      }
    }
  });
};
// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º
async function handleTextInput(ctx) {
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session) {
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ —Å–Ω–∞—á–∞–ª–∞.");
  }

  session.mode = "text";
  return ctx.reply("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.");
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
module.exports.handleCreatingSchedule = async (ctx, data) => {
  console.log(`üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${data}`);
  const scheduleData = loadSchedule1().schedule1;

  if (!scheduleData) return ctx.reply("‚ùå –í —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");

  // üîπ –í—ã–±–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
  if (data === "create_all") {
    const buttons = generateEventButtons(scheduleData);
    return ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
      Markup.inlineKeyboard(buttons)
    );
  }

  // üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
  if (data === "create_by_type") {
    const eventButtons = Object.keys(eventNames).map((key) =>
      Markup.button.callback(eventNames[key], `create_${key}`)
    );

    return ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
      Markup.inlineKeyboard(eventButtons, { columns: 2 })
    );
  }

  // üîπ –í—ã–±–æ—Ä —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø—É
  if (data.startsWith("create_Sobitie")) {
    const eventType = data.replace("create_", "");
    console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è: ${eventType}`);

    const filteredEvents = Object.values(scheduleData).flatMap((events) =>
      events
        .filter((event) => event[eventType])
        .map((event) => ({
          indexId: event.indexId,
          label: `üìÜ ${event.day} - ${event[eventType]}`,
        }))
    );

    if (filteredEvents.length === 0) {
      return ctx.reply(
        `‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è ${eventNames[eventType] || eventType}.`
      );
    }

    const buttons = filteredEvents.map((ev) => [
      Markup.button.callback(ev.label, `create_event_${ev.indexId}`),
    ]);

    return ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
      Markup.inlineKeyboard(buttons)
    );
  }

  // üîπ –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
  if (data.startsWith("create_event_")) {
    const indexId = parseFloat(data.replace("create_event_", ""));
    console.log(`üìÖ –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è —Å indexId: ${indexId}`);

    const chosenEvent = Object.values(scheduleData)
      .flat()
      .find((event) => parseFloat(event.indexId) === indexId);

    if (!chosenEvent) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ —Å indexId ${indexId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      return ctx.reply("‚ùå –û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
    }

    // üîπ –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Sobitie1)
    const eventTypeKey = Object.keys(chosenEvent).find((k) =>
      k.startsWith("Sobitie")
    );
    const eventTypeName = eventTypeKey ? chosenEvent[eventTypeKey] : "–°–æ–±—ã—Ç–∏–µ";

    // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ userSessions (—á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ)
    userSessions[ctx.from.id] = {
      chosenEvent,
      indexId,
      eventTypeKey, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á —Å–æ–±—ã—Ç–∏—è
      eventName: eventTypeName, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    };

    console.log(
      `‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ session: ${JSON.stringify(userSessions[ctx.from.id])}`
    );

    return ctx.reply(
      `üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è:\nüìÜ –î–∞—Ç–∞: ${chosenEvent.day}, ${eventTypeName}`,
      Markup.inlineKeyboard([
        [Markup.button.callback("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º", "create_text")],
        [Markup.button.callback("üìù –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥", "create_step")],
        [Markup.button.callback("üîô –û—Ç–º–µ–Ω–∞", "create_cancel")],
      ])
    );
  }

  // üîπ –í–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º
  if (data === "create_text") {
    handleTextInput(ctx);
    return;
  }

  // üîπ –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥
  if (data === "create_step") {
    handleTextInput(ctx);
    return;
  }

  // üîπ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  if (data === "create_confirm") {
    return handleConfirmation(ctx);
  }
};

// üìå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å–æ–±—ã—Ç–∏–π
function generateEventButtons(scheduleData) {
  return Object.values(scheduleData).flatMap((events) =>
    events.map((event) => {
      const eventType = Object.keys(event).find((key) =>
        key.startsWith("Sobitie")
      );
      return Markup.button.callback(
        `üìÜ ${event.day} - ${event[eventType]}`,
        `create_event_${event.indexId}`
      );
    })
  );
}

// üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function confirmSchedule(ctx) {
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session) return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.");

  // üîπ –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ò–ó session
  let eventName = session.eventName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ";

  console.log(`üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: ${eventName}`);

  let finalText = `üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è:\nüìÜ –î–∞—Ç–∞: ${session.chosenEvent.day}, ${eventName}\n`;

  if (session.mode === "text") {
    finalText += session.textData;
  } else {
    finalText += Object.values(session.scheduleData)
      .map((text, i) => `${i + 1}) ${text}`)
      .join("\n");
  }

  ctx.reply(
    `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:\n\n${finalText}`,
    Markup.inlineKeyboard([
      [Markup.button.callback("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", "create_confirm")],
      [Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∞", "create_cancel")],
    ])
  );
}

// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
async function handleConfirmation(ctx) {
  const userId = ctx.from.id;
  const session = userSessions[userId];

  if (!session) return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");

  const chatId = process.env.CHAT_ID;
  const topicId = process.env.SCHEDULE2_TOPIC_ID;

  // üîπ –ë–µ—Ä—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ session
  let eventName = session.eventName || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ";

  console.log(`üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: ${eventName}`);

  // üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  let finalText = `üìå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è:\nüìÜ –î–∞—Ç–∞: ${session.chosenEvent.day}, ${eventName}\n`;

  if (session.mode === "text") {
    finalText += `\nüìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n${session.textData}`;
  } else {
    finalText += `\nüìù –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n`;
    finalText += Object.values(session.scheduleData)
      .map((text, i) => `${i + 1}) ${text}`)
      .join("\n");
  }

  try {
    const sentMessage = await ctx.telegram.sendMessage(chatId, finalText, {
      message_thread_id: topicId,
    });

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ JSON
    const scheduleData = loadSchedule1(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const eventToUpdate = Object.values(scheduleData.schedule1)
      .flat()
      .find((event) => parseFloat(event.indexId) === session.indexId);

    if (eventToUpdate) {
      eventToUpdate.id = sentMessage.message_id; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º message_id
      fs.writeFileSync(
        "./data/schedule1.json",
        JSON.stringify(scheduleData, null, 2) // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON
      );
      console.log(`‚úÖ –ó–∞–ø–∏—Å–∞–Ω message_id: ${sentMessage.message_id}`);
    } else {
      console.log("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID.");
    }

    delete userSessions[userId];
    ctx.reply("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
    ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.");
  }
}
