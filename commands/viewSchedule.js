// commands/viewSchedule.js
const { Markup } = require("telegraf");
const { loadSchedule1 } = require("../utils/loadSchedule1");

module.exports = (bot) => {
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (schedule1)
  bot.command("viewSchedule", (ctx) => {
    const scheduleData = loadSchedule1().schedule1; // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { "–ê–ø—Ä–µ–ª—å": [...], "–ú–∞–π": [...] }
    let message = "";
    for (const month in scheduleData) {
      message += `üìÖ <b>${month}:</b>\n`;
      const events = scheduleData[month];
      events.forEach((ev) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚Äì –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –≤–∏–¥–∞ "–°–æ–±—ã—Ç–∏–µX"
        let eventType = "";
        let eventName = "";
        for (const key in ev) {
          if (key.startsWith("–°–æ–±—ã—Ç–∏–µ")) {
            eventType = key;
            eventName = ev[key];
            break;
          }
        }
        message += `üìÜ <b>–î–∞—Ç–∞:</b> ${ev.day}\n`;
        if (ev.indexId) {
          // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è2 –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è ‚Äì ID —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
          message += `/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ2 ${ev.indexId}\n`;
        } else {
          message += `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ2: –Ω–µ —Å–æ–∑–¥–∞–Ω–æ\n`;
        }
        message += `üë• <b>–ì—Ä—É–ø–ø–∞:</b> ${ev["–≥—Ä—É–ø–ø–∞"] || "-"}\n`;
        message += `üìΩ <b>–≠–∫—Ä–∞–Ω:</b> ${ev["—ç–∫—Ä–∞–Ω"] || "-"}\n`;
        message += `üí° <b>–°–≤–µ—Ç:</b> ${ev["—Å–≤–µ—Ç"] || "-"}\n`;
        message += `üé∂ <b>–ó–≤—É–∫:</b> ${ev["–∑–≤—É–∫"] || "-"}\n`;
        if (eventName) {
          message += `üìù <b>${eventName}</b>\n`;
        }
        message += `\n`;
      });
    }
    ctx.reply(message, { parse_mode: "HTML" });
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è2 –ø–æ ID —Å–æ–±—ã—Ç–∏—è
  bot.command("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ2", async (ctx) => {
    const args = ctx.message.text.split(" ");
    if (args.length < 2) {
      return ctx.reply("–£–∫–∞–∂–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ2 1.1");
    }
    const targetId = args[1];
    const scheduleData = loadSchedule1().schedule1;
    let targetEvent = null;
    // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ targetId –≤ –ª—é–±–æ–º –º–µ—Å—è—Ü–µ
    for (const month in scheduleData) {
      const events = scheduleData[month];
      targetEvent = events.find((ev) => ev.indexId === targetId);
      if (targetEvent) break;
    }
    if (!targetEvent) {
      return ctx.reply(`–°–æ–±—ã—Ç–∏–µ —Å ID ${targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω–æ –ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ2 –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
    if (!targetEvent.schedule2_id) {
      return ctx.reply("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ2 –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ.");
    }
    try {
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.telegram.forwardMessage(
        ctx.from.id,
        process.env.CHAT_ID, // ID —á–∞—Ç–∞ BD_info_grace
        targetEvent.schedule2_id,
        { message_thread_id: process.env.SCHEDULE2_TOPIC_ID }
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è2:", error);
      return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ2 –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.");
    }
  });
};
