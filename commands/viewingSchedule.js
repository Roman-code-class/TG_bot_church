const { Markup } = require("telegraf");
const { loadSchedule1 } = require("../utils/loadSchedule1");
const { loadRoles } = require("../utils/loadRoles"); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const eventNames = {
  Sobitie1: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
  Sobitie2: "–ß–µ—Ç–≤–µ—Ä–≥",
  Sobitie3: "–ú–æ–ª–æ–¥–µ–∂–∫–∞",
  Sobitie4: "–ù–æ—á–Ω–∞—è",
  Sobitie5: "–î—Ä—É–≥–æ–µ",
};

// üìå –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
async function handleViewEventSchedule(ctx, data) {
  console.log(`üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è -> ${data}`);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º indexId –∏–∑ callback –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
  const indexId = parseFloat(data.replace("view_event_schedule_", ""));
  console.log(`üîç –ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏—è —Å indexId: ${indexId}`);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  const scheduleData = loadSchedule1().schedule1;

  // –ò—â–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ indexId
  const chosenEvent = Object.values(scheduleData)
    .flat()
    .find((event) => parseFloat(event.indexId) === indexId);

  if (!chosenEvent) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ —Å indexId ${indexId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    return ctx.reply(`‚ùå –û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ —Å indexId ${indexId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
  if (!chosenEvent.id) {
    console.log(`‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${indexId} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.`);
    return ctx.reply("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.");
  }

  try {
    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    await ctx.telegram.forwardMessage(
      ctx.chat.id, // ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
      process.env.CHAT_ID, // ID —á–∞—Ç–∞, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      chosenEvent.id // ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
    );

    console.log(`‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ${indexId} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ.`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    return ctx.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.");
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
// üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
module.exports.handleViewingSchedule = async (ctx, data) => {
  console.log(`üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: ${data}`);

  const scheduleData = loadSchedule1().schedule1;
  if (!scheduleData) {
    console.log("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
    return ctx.reply("‚ùå –í —Ñ–∞–π–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");
  }

  // üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏–π
  if (data.startsWith("view_Sobitie")) {
    const eventType = data.replace("view_", "");
    console.log(`üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É: ${eventType}`);

    const filteredEvents = Object.entries(scheduleData).flatMap(
      ([month, events]) =>
        events
          .filter((event) => event[eventType])
          .map((event) => ({
            indexId: event.indexId,
            label: `üìÜ ${event.day} - ${event[eventType]}`,
          }))
    );

    if (filteredEvents.length === 0) {
      return ctx.reply(
        `‚ùå –ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è ${eventNames[eventType] || eventType}`
      );
    }

    // üîπ –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
    const buttons = filteredEvents.map((ev) => [
      Markup.button.callback(
        "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        `view_event_schedule_${ev.indexId}`
      ),
    ]);

    // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π + –∫–Ω–æ–ø–∫–∏
    return ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
      Markup.inlineKeyboard(buttons)
    );
  }
};

// –ö–æ–º–∞–Ω–¥–∞ /viewSchedule, –≤—ã–∑—ã–≤–∞—é—â–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
module.exports.initViewingSchedule = (bot) => {
  bot.command("viewSchedule", (ctx) => {
    console.log("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /viewSchedule –≤—ã–∑–≤–∞–Ω–∞");
    ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
      Markup.inlineKeyboard([
        [Markup.button.callback("üìã –í—Å–µ —Å–æ–±—ã—Ç–∏—è", "view_all")],
        [Markup.button.callback("üé≠ –ü–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è", "view_choose_event")],
        [Markup.button.callback("üë§ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "view_user_schedule")],
      ])
    );
  });

  bot.command(/view_event_schedule_\d+(\.\d+)?/, async (ctx) => {
    const data = ctx.message.text;
    await handleViewEventSchedule(ctx, data);
  });

  // üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  // bot.action("view_choose_event", async (ctx) => {
  //   console.log("üìã –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è");

  //   const buttons = Object.entries(eventNames).map(
  //     ([key, name]) => Markup.button.callback(name, `view_${key}`) // ‚¨ÖÔ∏è –ó–¥–µ—Å—å –±—ã–ª–∞ –æ—à–∏–±–∫–∞!
  //   );

  //   await ctx.reply(
  //     "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
  //     Markup.inlineKeyboard(buttons, { columns: 2 })
  //   );
  // });

  // bot.action(/^view_event_schedule_(\d+(\.\d+)?)$/, async (ctx) => {
  //   console.log(`üì© –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è -> ${ctx.match[1]}`);
  //   await require("../commands/viewingSchedule").handleViewEventSchedule(
  //     ctx,
  //     `view_event_schedule_${ctx.match[1]}`
  //   );
  // });

  bot.action("view_choose_event", async (ctx) => {
    console.log("üìã –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è");

    const buttons = Object.entries(eventNames).map(([key, name]) =>
      Markup.button.callback(name, `view_${key}`)
    );
    console.log("üîπ –ö–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π:", buttons);

    await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
      Markup.inlineKeyboard(buttons, { columns: 2 })
    );
  });

  bot.action(/^view_Sobitie\d+$/, async (ctx) => {
    console.log(`üì© –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø—É -> ${ctx.match[0]}`);
    await require("../commands/viewingSchedule").handleViewingSchedule(
      ctx,
      ctx.match[0]
    );
  });
};

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function formatSchedule(scheduleData) {
  if (!Object.keys(scheduleData).length) return null;

  return Object.entries(scheduleData)
    .map(
      ([month, events]) =>
        `üìÖ ${month}:\n` +
        events
          .map((event) => {
            let eventType = Object.entries(event)
              .filter(([key]) => key.startsWith("Sobitie"))
              .map(([_, value]) => `üìù ${value}`)
              .join("\n");
            return `üìÜ –î–∞—Ç–∞: ${event.day}\nüë• –ì—Ä—É–ø–ø–∞: ${
              event.group || "-"
            }\nüìΩ –≠–∫—Ä–∞–Ω: ${event.screen || "-"}\nüí° –°–≤–µ—Ç: ${
              event.svet || "-"
            }\nüé∂ –ó–≤—É–∫: ${event.zvuk || "-"}\n${eventType}\n`;
          })
          .join("\n")
    )
    .join("\n");
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
function filterSchedule(scheduleData, filterFn) {
  return Object.fromEntries(
    Object.entries(scheduleData)
      .map(([month, events]) => {
        const filtered = events.filter(filterFn);
        return filtered.length ? [month, filtered] : null;
      })
      .filter(Boolean) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Å—è—Ü—ã
  );
}
