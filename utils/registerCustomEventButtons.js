const { Markup } = require("telegraf");
const eventNames = require("./eventNames"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
const filterByEventType = require("./filterByEventType");
const { loadSchedule1 } = require("./loadSchedule1");

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø—É
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
 * @param {string} actionName - –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–º–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ_choose_schedule"
 */
function registerCustomEventButtons(bot, actionName) {
  // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  bot.action(actionName, async (ctx) => {
    console.log(`üìã –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è (${actionName})`);

    const buttons = Object.entries(eventNames).map(([key, name]) =>
      Markup.button.callback(name, `${actionName}_${key}`)
    );

    await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:",
      Markup.inlineKeyboard(buttons, { columns: 2 })
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
  Object.keys(eventNames).forEach((eventTypeKey) => {
    bot.action(`${actionName}_${eventTypeKey}`, async (ctx) => {
      console.log(`üì© –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø—É: ${eventTypeKey}`);

      const scheduleData = loadSchedule1().schedule1; // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
      const filteredSchedule = filterByEventType(scheduleData, eventTypeKey);

      await ctx.reply(filteredSchedule || "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.");
    });
  });
}

module.exports = registerCustomEventButtons;
