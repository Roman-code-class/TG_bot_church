// –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏

const roles = require("../data/roles.json"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Ä–æ–ª–µ–π

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ Telegram ID.
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {string | null} - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function getUserRole(userId) {
  userId = userId.toString(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è

  for (const [role, users] of Object.entries(roles)) {
    if (users.some((user) => user.id.toString() === userId)) {
      return role; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ä–æ–ª—å
    }
  }
  return null; // –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns {string | null} - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function getUserName(userId) {
  userId = userId.toString();

  for (const users of Object.values(roles)) {
    const foundUser = users.find((user) => user.id.toString() === userId);
    if (foundUser) {
      return foundUser.name; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
  }
  return null;
}

module.exports = { getUserRole, getUserName };

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// const { getUserRole, getUserName } = require("./utils/userRoleManager");

// bot.command("whoami", async (ctx) => {
//   const userId = ctx.from.id;
//   const role = getUserRole(userId);
//   const name = getUserName(userId);

//   if (!role) {
//     return ctx.reply("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.");
//   }

//   return ctx.reply(`üë§ –í—ã: ${name} | –í–∞—à–∞ —Ä–æ–ª—å: ${role}`);
// });
